/*
К каким негативным последствиям может привести данный фрагмент кода, и как это исправить? Приведите корректный пример реализации.

var justString string

	func someFunc() {
	  v := createHugeString(1 << 10)
	  justString = v[:100]
	}

	func main() {
	  someFunc()
	}

Негативные последствия:
v := createHugeString(1 << 10)
^
Именование переменой одной буквой не отражает ее назначение,
что потребует дополнительных усилий при доработке этого кода в будующем.


v := createHugeString(1 << 10)
					  ^^^^^^^
Задание переменной через битовое смещение мешает чтению кода,
заставляя задуматься сколько это будет в десятичной системе.


justString = v[:100]
  		   ^
При присваивании данных слайса другому слайсу возникает проблема.
Слайс это структура в которой есть переменая хранящая сылку на первый элемент массива,
после присваивания у нас будет 2 слайса с указателем на один массив.

1. При изменении данных внутри одного слайса также будут изменяться данные другого слайса
пока не произойдет выделение память под новый массив в одном из слайсов.

2. Переменная 'v' хранит в себе очень большой массив, а в 'justString' будет отображаться 
только первые 100 элементов. Но оба слайса указывают на один массив.
Поэтому сборщик мусора будет считать что все все элементы массива 'v' нужны и не будет 
удалять элементы после 100-го элемента. Они будут просто храниться в памяти.
При большом количестве вызова функции 'someFunc()' может привести к заметной утечке памяти.
*/
package main

var justString string

func someFunc() {
	// именовать переменные понятным именем
	const (
		needLen       = 1024
		newStringSize = 100
	)
	// лучше заменить конструкцию 1 << 10 на число, для простоты чтения кода
	newHugeString := createHugeString(needLen)

	// создание отдельного слайса, для защиты newHugeString от изменений которые могут внести в justString
	// создание []rune для возможности использовать символы UTF-8
	justString = string(make([]rune, newStringSize))
	// копирования данны пока не закончистя один из слайсов
	copy([]byte(justString), newHugeString)
}

func main() {
	someFunc()
}

func createHugeString(x int) string {
	runes := make([]rune, x) // Создание слайса байтов
	return string(runes)
}
